<?php

/**
 * Created by: Tanmnt
 * Email: maingocthanhan96@gmail.com
 * Date Time: {{DATE}}
 * File: {{CONTROLLER_CLASS}}.php
 */

namespace App\Http\Controllers\Api\v1;

use App\Models\{{MODAL_CLASS}};
use App\Service\QueryService;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Http\Requests\Store{{MODAL_CLASS}}Request;

class {{CONTROLLER_CLASS}}Controller extends Controller
{
    /**
     * {{CONTROLLER_CLASS}} constructor.
     * @author tanmnt
     */
    function __construct()
    {
        $this->middleware('permission:' . \LaraJS_Permission::PERMISSION_VISIT, ['only' => ['index']]);
        $this->middleware('permission:' . \LaraJS_Permission::PERMISSION_CREATE, ['only' => ['store']]);
        $this->middleware('permission:' . \LaraJS_Permission::PERMISSION_EDIT, ['only' => ['show', 'update']]);
        $this->middleware('permission:' . \LaraJS_Permission::PERMISSION_DELETE, ['only' => ['destroy']]);
    }

	/**
	 * lists
	 * @param Request $request
	 * @return \Illuminate\Http\JsonResponse
	 * @author tanmnt
	 */
	public function index(Request $request)
	{
		try {
			$limit = $request->get('limit', {{LIMIT}});
			$ascending = $request->get('ascending', 0);
			$orderBy = $request->get('orderBy', '');
			$query = $request->get('query', '');

			$columns = {{COLUMN_SORT}};
			$columnsWith = [];
			$columnSearch = {{COLUMN_SEARCH}};
			$with = {{COLUMN_RELATIONSHIP}};
			$qs = new QueryService(new {{MODAL_CLASS}});
			${{MODAL_CLASS_PARAM}} = $qs->queryTable($columns, $columnsWith, $query, $columnSearch, $with, $limit, $ascending, $orderBy);

			return $this->jsonTable(${{MODAL_CLASS_PARAM}});
		} catch (\Exception $e) {
			return $this->jsonError($e->getMessage());
		}
	}

	/**
	 * create
	 * @param Request $request
	 * @return \Illuminate\Http\JsonResponse
	 * @author tanmnt
	 */
	public function store(Store{{MODAL_CLASS}}Request $request)
	{
		try {
			${{MODAL_CLASS_PARAM}} = {{MODAL_CLASS}}::create($request->all());
			//{{CONTROLLER_RELATIONSHIP_MTM_CREATE_NOT_DELETE_THIS_LINE}}

			return $this->jsonData(${{MODAL_CLASS_PARAM}}, 201);
		} catch (\Exception $e) {
			return $this->jsonError($e->getMessage());
		}
	}

	/**
	 * get once by id
	 * @param Request $request
	 * @return \Illuminate\Http\JsonResponse
	 * @author tanmnt
	 */
	public function show({{MODAL_CLASS}} ${{MODAL_CLASS_PARAM}})
	{
		try {
		    //{{CONTROLLER_RELATIONSHIP_MTM_SHOW_NOT_DELETE_THIS_LINE}}

			return $this->jsonData(${{MODAL_CLASS_PARAM}});
		} catch (\Exception $e) {
			return $this->jsonError($e->getMessage(), 404);
		}
	}

	/**
	 * update once by id
	 * @param Request $request
	 * @param User $user
	 * @return \Illuminate\Http\JsonResponse
	 * @author tanmnt
	 */
	public function update(Store{{MODAL_CLASS}}Request $request, {{MODAL_CLASS}} ${{MODAL_CLASS_PARAM}})
	{
		try {
			${{MODAL_CLASS_PARAM}}->update($request->all());
            //{{CONTROLLER_RELATIONSHIP_MTM_UPDATE_NOT_DELETE_THIS_LINE}}

			return $this->jsonData(${{MODAL_CLASS_PARAM}});
		} catch (\Exception $e) {
			return $this->jsonError($e->getMessage());
		}
	}

	/**
	 * delete once by id
	 * @param User $user
	 * @return \Illuminate\Http\JsonResponse
	 * @author tanmnt
	 */
    public function destroy({{MODAL_CLASS}} ${{MODAL_CLASS_PARAM}})
    {
	    try {
	        //{{CONTROLLER_RELATIONSHIP_MTM_DELETE_NOT_DELETE_THIS_LINE}}
			${{MODAL_CLASS_PARAM}}->delete();

		    return $this->jsonSuccess(trans('messages.delete'), 204);
	    } catch (\Exception $e) {
	    	return $this->jsonError($e->getMessage());
	    }
    }

    //{{CONTROLLER_RELATIONSHIP_NOT_DELETE_THIS_LINE}}
}
