<template>
  <el-row>
    <el-col :span="24">
      <el-card>
        <div slot="header">
          <template v-if="$route.params.id">
            {{ $t('route.{{$LANG_MODEL_CLASS$}}_edit') }}
          </template>
          <template v-else>
            {{ $t('route.{{$LANG_MODEL_CLASS$}}_create') }}
          </template>
        </div>
        <el-form ref="{{$REF_MODEL_CLASS$}}" v-loading="loading.form" :model="form" :rules="rules" label-position="top">
        <!--{{$FROM_ITEM_NOT_DELETE_THIS_LINE$}}-->
          <el-form-item class="tw-flex tw-justify-center">
            <template v-if="$route.params.id">
              <el-button :loading="loading.button" round type="primary" icon="el-icon-edit" @click="() => update('{{$REF_MODEL_CLASS$}}')">
                {{ $t('button.edit') }}
              </el-button>
            </template>
            <template v-else>
              <el-button :loading="loading.button" round type="success" icon="el-icon-plus" @click="() => store('{{$REF_MODEL_CLASS$}}')">
                {{ $t('button.create') }}
              </el-button>
            </template>
          </el-form-item>
        </el-form>
      </el-card>
    </el-col>
  </el-row>
</template>

<script>
import { scrollTo } from '@/utils/scroll-to';
import {{$MODEL_CLASS$}}Resource from '@/api/{{$API_VERSION$}}/{{$NAME_API}}';
// {{$IMPORT_COMPONENT_NOT_DELETE_THIS_LINE$}}

const {{$CONST_MODEL_CLASS$}}Resource = new {{$MODEL_CLASS$}}Resource();

export default {
  components: {
    // {{$IMPORT_COMPONENT_NAME_NOT_DELETE_THIS_LINE$}}
  },
  data() {
    return {
      form: {
        // {{$FORM_FIELDS_NOT_DELETE_THIS_LINE$}}
      }, // {{$$}}
      loading: {
        form: false,
        button: false,
      },
      // {{$DATA_NOT_DELETE_THIS_LINE$}}
    };
  },
  async created() {
    const { id } = this.$route.params;
    if (id) {
      this.loading.form = true;
      const {
        data: { data: {{$CONST_MODEL_CLASS$}} },
      } = await {{$CONST_MODEL_CLASS$}}Resource.get(id);
      this.form = {{$CONST_MODEL_CLASS$}};
      this.loading.form = false;
    }
  },
  computed: {
    // not rename rules
    rules() {
      return {
        // {{$RULES_NOT_DELETE_THIS_LINE$}}
      };
    },
  },
  methods: {
    // {{$METHODS_NOT_DELETE_THIS_LINE$}}
    store({{$REF_MODEL_CLASS$}}) {
      // {{$FILE_JSON_STRINGIFY_NOT_DELETE_THIS_LINE$}}
      this.$refs[{{$REF_MODEL_CLASS$}}].validate(async (valid, errors) => {
        if (!valid) {
          if (document.getElementsByName(Object.keys(errors)[0]).length) {
            scrollTo(document.getElementsByName(Object.keys(errors)[0])[0].getBoundingClientRect().top - document.body.getBoundingClientRect().top - 130, 800);
          }
          return false;
        }
        try {
          this.loading.button = true;
          await {{$CONST_MODEL_CLASS$}}Resource.store(this.form);
          this.$message({
            showClose: true,
            message: this.$t('messages.create'),
            type: 'success',
          });
          // {{$RESET_FIELD_NOT_DELETE_THIS_LINE$}}
          // this.$refs[{{$REF_MODEL_CLASS$}}].resetFields();
          this.loading.button = false;
          this.$router.push({ name: '{{$NAME_ROUTE$}}' });
        } catch(e) {
          this.loading.button = false;
        }
      });
    },
    update({{$REF_MODEL_CLASS$}}) {
      // {{$FILE_JSON_STRINGIFY_NOT_DELETE_THIS_LINE$}}
      this.$refs[{{$REF_MODEL_CLASS$}}].validate(async (valid, errors) => {
        if (!valid) {
          if (document.getElementsByName(Object.keys(errors)[0]).length) {
            scrollTo(document.getElementsByName(Object.keys(errors)[0])[0].getBoundingClientRect().top - document.body.getBoundingClientRect().top - 130, 800);
          }
          return false;
        }
        try {
          this.loading.button = true;
          await {{$CONST_MODEL_CLASS$}}Resource.update(this.$route.params.id, this.form);
          this.$message({
            showClose: true,
            message: this.$t('messages.update'),
            type: 'success',
          });
          this.loading.button = false;
          this.$router.push({ name: '{{$NAME_ROUTE$}}' });
        } catch (e) {
          this.loading.button = false;
        }
      });
    },
  },
};
</script>
