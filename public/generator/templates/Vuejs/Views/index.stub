<template>
  <el-row>
    <el-col :span="24">
      <el-card>
        <div slot="header" class="flex justify-end items-center">
          <router-link v-permission="['create']" :to="{name: '{{$CONST_MODEL_CLASS$}}_create'}" class="pan-btn blue-btn" tag="button">
            <i class="el-icon-plus mr-2" />{{this.$t('button.create')}}
          </router-link>
        </div>
        <v-server-table
          ref="table_{{$CONST_MODEL_CLASS$}}"
          name="table_{{$CONST_MODEL_CLASS$}}"
          :columns="table.columns"
          :options="table.options"
        >
          <template v-if="loading" slot="afterBody">
            <div v-loading="loading" class="overlay-loader" />
          </template>
          <template slot="id" slot-scope="props">{{ props.index }}</template>
          <!--{{$TEMPLATES_NOT_DELETE_THIS_LINE$}}-->
          <div slot="actions" slot-scope="props" class="flex justify-center items-center">
            <router-link v-permission="['edit']" :to="{name: '{{$CONST_MODEL_CLASS$}}_edit', params: {id: props.row.id}}"><i class="el-icon-edit el-link el-link--primary mr-2"></i></router-link>
            <a v-permission="['delete']" class="cursor-pointer" @click.stop="remove(props.row.id, props.index)"><i class="el-icon-delete el-link el-link--danger"></i></a>
          </div>
        </v-server-table>
      </el-card>
    </el-col>
  </el-row>
</template>
<script>
  import {{$MODEL_CLASS$}}Resource from '@/api/{{$CONST_MODEL_CLASS$}}';
  const {{$CONST_MODEL_CLASS$}}Resource = new {{$MODEL_CLASS$}}Resource();
  export default {
    data() {
      return {
        table: {
          columns: [{{$COLUMN_FIELD$}}],
          options: {
            // request list
            requestFunction: function(query) {
              return {{$CONST_MODEL_CLASS$}}Resource.list(query);
            },
            //header table
            headings: {
              // {{$HEADING_FIELDS_NOT_DELETE_THIS_LINE$}}
            },
            // add class row table
            columnsClasses: {
              // {{$COLUMN_CLASSES_FIELDS_NOT_DELETE_THIS_LINE$}}
            },
            templates: {
              created_at: (h, row) => {
                return this.$options.filters.parseTime(row.created_at, '{y}-{m}-{d}');
              },
            },
            sortable: [{{$SORTABLE_FIELDS$}}],
          },
        },
        loading: false,
      };
    },
    mounted() {
      Event.$on('vue-tables.loading', () => {
        this.loading = true;
      });
      Event.$on('vue-tables.loaded', () => {
        this.loading = false;
      });
    },
    methods: {
      remove(id, name) {
        this.$confirm(this.$t('messages.delete_confirm', { attribute: this.$t('table.{{$TABLE_MODEL_CLASS$}}.id') + '#' + name }), this.$t('messages.warning'), {
          confirmButtonText: this.$t('button.ok'),
          cancelButtonClass: this.$t('button.cancel'),
          type: 'warning',
          center: true,
        }).then(async () => {
          this.loading = true;
          await {{$CONST_MODEL_CLASS$}}Resource.destroy(id);
          const index = this.$refs.table_{{$CONST_MODEL_CLASS$}}.data.findIndex((value) => value.id === id);
          this.$refs.table_{{$CONST_MODEL_CLASS$}}.data.splice(index, 1);
          this.$message({
            showClose: true,
            message: this.$t('messages.delete'),
            type: 'success',
          });
          this.loading = false;
        });
      },
    },
  };
</script>
