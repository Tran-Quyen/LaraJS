<template>
  <el-row>
    <el-col :span="24">
      <el-card>
        <div slot="header" class="flex justify-end items-center">
          <router-link v-permission="['create']" :to="{name: '{{$CONST_MODEL_CLASS$}}_create'}" class="pan-btn blue-btn" tag="button">
            <i class="el-icon-plus mr-2" />{{this.$t('button.create')}}
          </router-link>
        </div>
        <div class="flex flex-col">
          <el-col :span="24" class="mb-6">
            <el-col :xs="24" :sm="10" :md="6">
              <label>{{ $t('table.texts.filter') }}</label>
              <el-input v-model="table.listQuery.query" :placeholder="$t('table.texts.filterPlaceholder')"/>
            </el-col>
            <el-col :xs="24" :sm="14" :md="18">
              <br/>
              <el-date-picker
                v-model="table.listQuery.created_at"
                class="md:float-right"
                type="daterange"
                :start-placeholder="$t('date.start_date')"
                :end-placeholder="$t('date.end_date')"
                :picker-options="pickerOptions"
                @change="changeDateRangePicker"
              >
              </el-date-picker>
            </el-col>
          </el-col>
          <el-col :span="24" class="table-responsive">
            <el-table
              class="w-full"
              v-loading="table.loading"
              :data="table.list"
              :default-sort = "{prop: 'created_at', order: 'descending'}"
              border
              fit
              highlight-current-row
              @sort-change="sortChange"
              >
                <el-table-column align="center" sortable="custom" prop="id" :label="$t('table.{{$TABLE_MODEL_CLASS$}}.id')" width="70px">
                  <template slot-scope="{ $index }">
                    {{ (table.listQuery.page - 1) * table.listQuery.limit + $index + 1 }}
                  </template>
                </el-table-column>
                <!--{{$TEMPLATES_NOT_DELETE_THIS_LINE$}}-->
                <el-table-column data-generator="created_at" prop="created_at" :label="$t('date.created_at')" sortable="custom" align="center" header-align="center">
                  <template slot-scope="{ row }">
                    {{ row.created_at | parseTime('{y}-{m}-{d}') }}
                  </template>
                </el-table-column>
                <el-table-column :label="$t('table.actions')" align="center" class-name="small-padding fixed-width">
                  <template slot-scope="props">
                    <router-link v-permission="['edit']" :to="{name: '{{$CONST_MODEL_CLASS$}}_edit', params: {id: props.row.id}}"><i class="el-icon-edit el-link el-link--primary mr-2"></i></router-link>
                    <a v-permission="['delete']" class="cursor-pointer" @click.stop="remove(props.row.id, props.index)"><i class="el-icon-delete el-link el-link--danger"></i></a>
                  </template>
                </el-table-column>
              </el-table>
              <pagination v-if="table.total > 0" :total="table.total" :page.sync="table.listQuery.page" :limit.sync="table.listQuery.limit" @pagination="getList" />
          </el-col>
        </div>
      </el-card>
    </el-col>
  </el-row>
</template>
<script>
  import dateRangePicker from '@/plugins/mixins/dateRangePicker';
  import Pagination from '@/components/Pagination'; // Secondary package based on el-pagination
  import {debounce} from '@/utils';
  import {{$MODEL_CLASS$}}Resource from '@/api/{{$CONST_MODEL_CLASS$}}';
  const {{$CONST_MODEL_CLASS$}}Resource = new {{$MODEL_CLASS$}}Resource();

  export default {
    components: { Pagination },
    mixins: [dateRangePicker],
    data() {
      return {
        table: {
          listQuery: {
            query: '',
            limit: {{$LIMIT$}},
            ascending: 1,
            page: 1,
            orderBy: 'created_at',
            created_at: [this.parseTime(new Date().getTime() - 86400000 * 30), this.parseTime(new Date())],
          },
          list: null,
          total: 0,
          loading: false,
        },
      }
    },
    mounted() {
      this.getList();
    },
    methods: {
      async getList() {
        this.table.loading = true;
        const { data } = await {{$CONST_MODEL_CLASS$}}Resource.list(this.table.listQuery);
        this.table.list = data.data;
        this.table.total = data.count;

        // Just to simulate the time of the request
        this.table.loading = false;
      },
      handleFilter() {
        this.table.listQuery.page = 1;
        this.getList();
      },
      changeDateRangePicker(date) {
        if (date) {
          const startDate = this.parseTime(date[0]);
          const endDate = this.parseTime(date[1]);
          this.table.listQuery.created_at = [startDate, endDate];
        } else {
          this.table.listQuery.created_at = [];
        }
        this.handleFilter();
      },
      sortChange(data) {
        const { prop, order } = data;
        this.table.listQuery.orderBy = prop;
        if(order === 'ascending') {
          this.table.listQuery.ascending = 0;
        } else {
          this.table.listQuery.ascending = 1;
        }
        this.getList();
      },
      remove(id, name) {
        this.$confirm(this.$t('messages.delete_confirm', { attribute: this.$t('table.{{$TABLE_MODEL_CLASS$}}.id') + '#' + name }), this.$t('messages.warning'), {
          confirmButtonText: this.$t('button.ok'),
          cancelButtonClass: this.$t('button.cancel'),
          type: 'warning',
          center: true,
        }).then(async () => {
          this.table.loading = true;
          await {{$CONST_MODEL_CLASS$}}Resource.destroy(id);
          const index = this.$refs.table_{{$CONST_MODEL_CLASS$}}.data.findIndex((value) => value.id === id);
          this.$refs.table_{{$CONST_MODEL_CLASS$}}.data.splice(index, 1);
          this.$message({
            showClose: true,
            message: this.$t('messages.delete'),
            type: 'success',
          });
          this.table.loading = false;
        });
      },
      parseTime(date, format = '{y}-{m}-{d}') {
        return this.$options.filters.parseTime(date, format);
      },
    },
    watch: {
      'table.listQuery.query': debounce(function() {
        this.handleFilter();
      }, 500),
    },
  };
</script>
